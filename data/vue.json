[{"name":"isUndef","path":"/shared/util.js","desc":"","detail":"export function isUndef (v: any): boolean %checks {\n  return v === undefined || v === null\n}","id":"f0fdfcbef7e245f47aabc3c73405505f","time":"2018-6-26 09:53:20"},{"name":"isDef","path":"/shared/util.js","desc":"","detail":"export function isDef (v: any): boolean %checks {\n  return v !== undefined && v !== null\n}","id":"47a866dcf919bd4f45541e08a43de250","time":"2018-6-26 10:05:56"},{"name":"isTrue","path":"/shared/util.js","desc":"","detail":"export function isTrue (v: any): boolean %checks {\n  return v === true\n}","id":"1cba25c31becbc85141955fbf361b860","time":"2018-6-26 10:05:53"},{"name":"isFalse","path":"/shared/util.js","desc":"","detail":"export function isFalse (v: any): boolean %checks {\n  return v === false\n}\n","id":"766d477cf1afb768ccdf54ec7b2af2fc","time":"2018-6-26 10:05:48"},{"name":"isPrimitive","path":"/shared/util.js","desc":"检查是否基本数据类型： 比如string，number，boolean","detail":"export function isPrimitive (value: any): boolean %checks {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  )\n}","id":"47e3339ad30967cb1e349ac78a4177cf","time":"2018-6-26 10:05:18"},{"name":"isObject","path":"/shared/util.js","desc":" Quick object check - this is primarily used to tell\n Objects from primitive values when we know the value\n is a JSON-compliant type.\n\n是否是数组或对象等 能被json.stringify的类型","detail":"export function isObject (obj: mixed): boolean %checks {\n  return obj !== null && typeof obj === 'object'\n}","id":"76ec7547247d8f507d0cfd0c83191307","time":"2018-6-26 10:08:22"},{"name":"_toString","path":"/shared/util.js","desc":"Get the raw type string of a value e.g. [object Object]\n\n得到[object Object] 类似结构","detail":"const _toString = Object.prototype.toString","id":"75fd26d9a779ae435efb4ce7ca3de78c","time":"2018-6-26 10:09:52"},{"name":"toRawType","path":"/shared/util.js","desc":"Get the raw type string of a value e.g. [object Object]\n获取值的原始类型字符串\n\n例如：\n  toRawType('me')   =>   '[object String]'  =>  'String'","detail":"export function toRawType (value: any): string {\n  return _toString.call(value).slice(8, -1)\n}","id":"e91749314514c1470506d3bf78f7acdc","time":"2018-6-26 10:13:39"},{"name":"isPlainObject","path":"/shared/util.js\t","desc":"/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n * 判断是否为 {} 类型\n */","detail":"export function isPlainObject (obj: any): boolean {\n  return _toString.call(obj) === '[object Object]'\n}","id":"1f24075c8b6e233b22c66aa56b5e5f6d","time":"2018-6-26 10:24:11"},{"name":"isRegExp","path":"/shared/util.js\t","desc":"判断是否为正则对象","detail":"export function isRegExp (v: any): boolean {\n  return _toString.call(v) === '[object RegExp]'\n}","id":"13894e91599a1b95b3adfa6ae3cc359a","time":"2018-6-26 10:24:31"},{"name":"isValidArrayIndex","path":"/shared/util.js\t","desc":"Check if val is a valid array index.\n是否为合理的数组下标","detail":"export function isValidArrayIndex (val: any): boolean {\n  const n = parseFloat(String(val))\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}","id":"c227f9026260f2e32d284988ebfb2b3a","time":"2018-6-26 10:26:11"},{"name":"toString","path":"/shared/util.js\t","desc":"","detail":"/**\n * Convert a value to a string that is actually rendered.\n */\nexport function toString (val: any): string {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}","id":"d4d6feae406e8887e4887cc16f75ba3a","time":"2018-6-26 11:24:30"},{"name":"toNumber","path":"/shared/util.js\t","desc":"","detail":"/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nexport function toNumber (val: string): number | string {\n  const n = parseFloat(val)\n  return isNaN(n) ? val : n\n}","id":"efa058fef74cfb0acddd163b730507cf","time":"2018-6-26 11:25:14"},{"name":"makeMap","path":"/shared/util.js\t","desc":"例如： export const isBuiltInTag = makeMap('slot,component', true)\n\nisBuiltInTag（‘div’） 是一个函数， 接收字符串为参数，  类似于 'slot,component'.includes('div')","detail":"/**\n * Make a map and return a function for checking if a key\n * is in that map.\n * 创建一个闭包 保存常量 map， 用来存储一些VUE内部用的键\n * @param {string} str 键名\n * @param {boolean} expectsLowerCase 是否转小写\n */\nexport function makeMap (\n  str: string,\n  expectsLowerCase?: boolean\n): (key: string) => true | void {\n  const map = Object.create(null)\n  const list: Array<string> = str.split(',')\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true\n  }\n  return expectsLowerCase\n    ? val => map[val.toLowerCase()]\n    : val => map[val]\n}","id":"491451e9467d2d2246890eefb66f47d8","time":"2018-6-26 11:36:02"},{"name":"isBuiltInTag","path":"/shared/util.js","desc":"一个函数， 字符串参数， 详见 makeMap","detail":"/**\n * Check if a tag is a built-in tag.\n */\nexport const isBuiltInTag = makeMap('slot,component', true)","id":"d6577006f4ff4682af85c3fd42eb638f","time":"2018-6-26 14:27:05"},{"name":"remove","path":"/shared/util.js","desc":"移除数组指定项","detail":"/**\n * Remove an item from an array\n * 移除数组指定项\n */\nexport function remove (arr: Array<any>, item: any): Array<any> | void {\n  if (arr.length) {\n    const index = arr.indexOf(item)\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}","id":"4f155840b14f95b0043b1a4a97e8a24a","time":"2018-6-26 14:29:00"},{"name":"hasOwnProperty","path":"/shared/util.js","desc":"见 hasOwn","detail":"const hasOwnProperty = Object.prototype.hasOwnProperty","id":"2af9780abe845c5ed3b1f71fa8d8fa88","time":"2018-6-26 14:30:02"},{"name":"hasOwn","path":"/shared/util.js","desc":"所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。\n这个方法可以用来检测一个对象是否含有特定的自身属性；\n和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。","detail":"/**\n * Check whether the object has the property.\n * 检查对象是否具有该属性\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nexport function hasOwn (obj: Object | Array<*>, key: string): boolean {\n  return hasOwnProperty.call(obj, key)\n}","id":"1c3ad40ffdc2359f65ce68f770052c5e","time":"2018-6-26 14:32:02"},{"name":"cached","path":"/shared/util.js","desc":"e.g ：\ntoLower = cached((str) => {\n  return str.toLowerCase()\n})\n\n由cached 生成 函数 toLower，多次调用 toLower ,如果参数之前有缓存， 直接返回之前的缓存","detail":"/**\n * Create a cached version of a pure function.\n * 使用闭包创建一个纯函数的缓存版本。\n * @param {Function} fn 特定功能的纯函数作为参数传递时，会返回一个函数，并将函数的参数str 设置为cache的键，函数的返回值作为value存储。\n * 下次调用时如果命中str 将优先返回该str对应的value\n */\nexport function cached<F: Function> (fn: F): F {\n  const cache = Object.create(null)\n  return (function cachedFn (str: string) {\n    const hit = cache[str]\n    return hit || (cache[str] = fn(str))\n  }: any)\n}","id":"60be1558a6f95c4681a92b75b4bbb414","time":"2018-6-26 14:52:40"},{"name":"camelize","path":"/shared/util.js","desc":"","detail":"/**\n * Camelize a hyphen-delimited string.\n * 类似  vue-router   转为  vueRouter\n */\nconst camelizeRE = /-(\\w)/g\nexport const camelize = cached((str: string): string => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')\n})","id":"f82276075ebb84c138f13fb305e0a4e7","time":"2018-6-26 14:53:22"},{"name":"capitalize","path":"/shared/util.js","desc":"","detail":"/**\n * Capitalize a string.\n * 首字母大写\n */\nexport const capitalize = cached((str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n})","id":"ff982348f76af098fc274354feed7203","time":"2018-6-26 14:53:40"},{"name":"hyphenate","path":"/shared/util.js","desc":"","detail":"/**\n * Hyphenate a camelCase string.\n * 类似 vueRouter 转为 vue-router\n */\nconst hyphenateRE = /\\B([A-Z])/g\nexport const hyphenate = cached((str: string): string => {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n})","id":"e333596fe891144601ee99b2bc709c82","time":"2018-6-26 14:54:02"},{"name":"bind","path":"/shared/util.js","desc":"用法  bind(Math.max, null)(3,6,9,7,5)","detail":"/**\n * Simple bind, faster than native\n * 作者实现的bind函数: \n */\nexport function bind (fn: Function, ctx: Object): Function {\n  function boundFn (a) {\n    const l: number = arguments.length\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length\n  return boundFn\n}","id":"1a9ee11de305d33a5a8a9dc2a947e2ea","time":"2018-6-26 15:38:47"},{"name":"toArray","path":"/shared/util.js","desc":"","detail":"/**\n * Convert an Array-like object to a real Array.\n * 将类数组转为数组\n */\nexport function toArray (list: any, start?: number): Array<any> {\n  start = start || 0\n  let i = list.length - start\n  const ret: Array<any> = new Array(i)\n  while (i--) {\n    ret[i] = list[i + start]\n  }\n  return ret\n}","id":"ce81d4390e6266faba6e08c220611378","time":"2018-6-26 15:44:23"},{"name":"extend","path":"/shared/util.js","desc":"","detail":"/**\n * Mix properties into target object.\n * 传入对象合并到目标对象。\n */\nexport function extend (to: Object, _from: ?Object): Object {\n  for (const key in _from) {\n    to[key] = _from[key]\n  }\n  return to\n}","id":"0c96ca3763d0be36a24b70862a7ea8fa","time":"2018-6-26 15:44:54"},{"name":"toObject","path":"/shared/util.js","desc":"合并一个对象数组 至 一个融合对象","detail":"/**\n * Merge an Array of Objects into a single Object.\n * @param {Array} arr [ {name: 'vue'}, {version: '2.5.0'} ]\n * @return {Object} res {name: 'vue', version: '2.5.0'}\n */\nexport function toObject (arr: Array<any>): Object {\n  const res = {}\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i])\n    }\n  }\n  return res\n}","id":"955ab31de05c87dea38eef7f7d069ca8","time":"2018-6-26 15:55:23"},{"name":"noop","path":"/shared/util.js","desc":"空函数","detail":"/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n * 空函数\n */\nexport function noop (a?: any, b?: any, c?: any) {}\n","id":"0c3eca6f82a9da418253edbacbe2a4f6","time":"2018-6-26 15:55:17"},{"name":"no","path":"/shared/util.js","desc":"","detail":"/**\n * Always return false.\n * 总是返回false\n */\nexport const no = (a?: any, b?: any, c?: any) => false","id":"13b921a07eb65a96d3f484f4f9bcf81d","time":"2018-6-26 15:55:11"},{"name":"identity","path":"/shared/util.js","desc":"","detail":"/**\n * Return same value\n * 总是返回参数\n */\nexport const identity = (_: any) => _","id":"5ce6b673f166aa56d0368f43004693ea","time":"2018-6-26 15:55:05"},{"name":"genStaticKeys","path":"/shared/util.js","desc":"不详","detail":"/**\n * Generate a static keys string from compiler modules.\n * @return {string}  'staticClass,staticStyle'\n */\nexport function genStaticKeys (modules: Array<ModuleOptions>): string {\n  return modules.reduce((keys, m) => {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}","id":"c8e80ab8d59423d40dd16cd3847ef975","time":"2018-6-26 15:56:56"},{"name":"looseEqual","path":"/shared/util.js","desc":"","detail":"/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nexport function looseEqual (a: any, b: any): boolean {\n  if (a === b) return true\n  const isObjectA = isObject(a)\n  const isObjectB = isObject(b)\n  // 如果都是对象\n  if (isObjectA && isObjectB) {\n    try {\n      const isArrayA = Array.isArray(a)\n      const isArrayB = Array.isArray(b)\n      // 如果都是数组\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every((e, i) => {\n          // 因为不知道子项类型，递归比较子项。\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) { // 如果两个都不是数组，即都是plainObject， 那么比较他们的key\n        const keysA = Object.keys(a)\n        const keysB = Object.keys(b)\n        return keysA.length === keysB.length && keysA.every(key => {\n          return looseEqual(a[key], b[key])\n        })\n      } else { // 一个数组一个对象\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) { // 两个都不是 数组或对象\n    return String(a) === String(b)\n  } else { // 一个 Primitive  一个 Object\n    return false\n  }\n}","id":"a96d59888b39ec387f40bbea1d07018a","time":"2018-6-26 16:35:30"},{"name":"looseIndexOf","path":"/shared/util.js\t","desc":"详见looseEqual","detail":"// 非全等比较的 数组的indexOf方法\nexport function looseIndexOf (arr: Array<mixed>, val: mixed): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) return i\n  }\n  return -1\n}","id":"ec6c426069653e7d5d6a8655e9f61573","time":"2018-6-26 16:55:13"},{"name":"once","path":"/shared/util.js\t","desc":"","detail":"/**\n * Ensure a function is called only once.\n * 确保一个函数只调用一次\n */\nexport function once (fn: Function): Function {\n  let called = false\n  return function () {\n    if (!called) {\n      called = true\n      fn.apply(this, arguments)\n    }\n  }\n}","id":"0679d1978d1c2b459dfb790c586be46c","time":"2018-6-26 16:55:52"}]